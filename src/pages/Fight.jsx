import { useNavigate } from "react-router-dom";
import { useState, useEffect } from "react";
import { getCharacter, setCharacter } from "../utils/storage";
import { monsters, attackZones } from "../data/monsters";
import styles from "../styles/Fight.module.css";

export default function Fight() {
  const navigate = useNavigate();
  const [char, setChar] = useState(getCharacter());
  const [playerHP, setPlayerHP] = useState(100);
  const [monster, setMonster] = useState(null);
  const [monsterHP, setMonsterHP] = useState(0);
  const [log, setLog] = useState([]);
  const [gameOver, setGameOver] = useState(false);
  
  // –í—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞
  const [playerAttack, setPlayerAttack] = useState([]);
  const [playerDefense, setPlayerDefense] = useState([]);
  
  // –í—ã–±–æ—Ä –º–æ–Ω—Å—Ç—Ä–∞ (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ö–æ–¥)
  const [monsterAttack, setMonsterAttack] = useState([]);
  const [monsterDefense, setMonsterDefense] = useState([]);

  // –†–µ–¥–∏—Ä–µ–∫—Ç –µ—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  useEffect(() => {
    if (!char.name) {
      navigate("/", { replace: true });
    }
  }, [char.name, navigate]);

  // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const randomMonster = monsters[Math.floor(Math.random() * monsters.length)];
    setMonster(randomMonster);
    setMonsterHP(randomMonster.health);
  }, []);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–æ–¥ –º–æ–Ω—Å—Ç—Ä–∞
  const generateMonsterTurn = () => {
    if (!monster) return;
    
    // –ê—Ç–∞–∫–∞ –º–æ–Ω—Å—Ç—Ä–∞
    const attackZonesCopy = [...attackZones];
    const monsterAttackZones = [];
    
    for (let i = 0; i < monster.attackZones; i++) {
      if (attackZonesCopy.length === 0) break;
      const randomIndex = Math.floor(Math.random() * attackZonesCopy.length);
      monsterAttackZones.push(attackZonesCopy[randomIndex].id);
      attackZonesCopy.splice(randomIndex, 1);
    }
    
    // –ó–∞—â–∏—Ç–∞ –º–æ–Ω—Å—Ç—Ä–∞
    const defenseZonesCopy = [...attackZones];
    const monsterDefenseZones = [];
    
    for (let i = 0; i < monster.defenseZones; i++) {
      if (defenseZonesCopy.length === 0) break;
      const randomIndex = Math.floor(Math.random() * defenseZonesCopy.length);
      monsterDefenseZones.push(defenseZonesCopy[randomIndex].id);
      defenseZonesCopy.splice(randomIndex, 1);
    }
    
    setMonsterAttack(monsterAttackZones);
    setMonsterDefense(monsterDefenseZones);
  };

  const addLog = (msg) => setLog((prev) => [msg, ...prev]);

  const handleZoneSelect = (zoneId, type) => {
    if (type === 'attack') {
      if (playerAttack.includes(zoneId)) {
        setPlayerAttack(playerAttack.filter(z => z !== zoneId));
      } else if (playerAttack.length < 1) {
        setPlayerAttack([...playerAttack, zoneId]);
      }
    } else {
      if (playerDefense.includes(zoneId)) {
        setPlayerDefense(playerDefense.filter(z => z !== zoneId));
      } else if (playerDefense.length < 2) {
        setPlayerDefense([...playerDefense, zoneId]);
      }
    }
  };

  const isAttackButtonDisabled = playerAttack.length !== 1 || playerDefense.length !== 2;

  const fight = () => {
    if (gameOver || isAttackButtonDisabled) return;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–æ–¥ –º–æ–Ω—Å—Ç—Ä–∞
    generateMonsterTurn();

    // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    setTimeout(() => {
      // –õ–æ–≥–∏–∫–∞ –±–æ—è
      let playerDamageTaken = 0;
      let monsterDamageTaken = 0;

      // –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç
      playerAttack.forEach(attackZone => {
        if (!monsterDefense.includes(attackZone)) {
          monsterDamageTaken += 10; // –£—Ä–æ–Ω –∏–≥—Ä–æ–∫–∞
          addLog(`‚öîÔ∏è ${char.name} –ø–æ–ø–∞–ª –≤ ${getZoneName(attackZone)}!`);
        } else {
          addLog(`üõ°Ô∏è –ú–æ–Ω—Å—Ç—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∞—Ç–∞–∫—É –≤ ${getZoneName(attackZone)}`);
        }
      });

      // –ú–æ–Ω—Å—Ç—Ä –∞—Ç–∞–∫—É–µ—Ç
      monsterAttack.forEach(attackZone => {
        if (!playerDefense.includes(attackZone)) {
          playerDamageTaken += monster.damage;
          addLog(`‚öîÔ∏è ${monster.name} –ø–æ–ø–∞–ª –≤ ${getZoneName(attackZone)}!`);
        } else {
          addLog(`üõ°Ô∏è ${char.name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∞—Ç–∞–∫—É –≤ ${getZoneName(attackZone)}`);
        }
      });

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Ä–æ–Ω
      setMonsterHP(hp => Math.max(hp - monsterDamageTaken, 0));
      setPlayerHP(hp => Math.max(hp - playerDamageTaken, 0));

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
      setPlayerAttack([]);
      setPlayerDefense([]);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–µ—Ü –±–æ—è
      if (playerHP - playerDamageTaken <= 0) {
        endFight(false);
      } else if (monsterHP - monsterDamageTaken <= 0) {
        endFight(true);
      }
    }, 500);
  };

  const getZoneName = (zoneId) => {
    const zone = attackZones.find(z => z.id === zoneId);
    return zone ? zone.name : zoneId;
  };

  const getZoneIcon = (zoneId) => {
    const zone = attackZones.find(z => z.id === zoneId);
    return zone ? zone.icon : '‚ùì';
  };

  const surrender = () => {
    if (gameOver) return;
    addLog(`üè≥Ô∏è ${char.name} —Å–¥–∞–ª—Å—è`);
    endFight(false);
  };

  const endFight = (won) => {
    setGameOver(true);
    const updated = { ...char };
    if (won) {
      updated.wins++;
      addLog(`üéâ ${char.name} –ø–æ–±–µ–¥–∏–ª ${monster.name}!`);
    } else {
      updated.loses++;
      addLog(`üíÄ ${char.name} –ø—Ä–æ–∏–≥—Ä–∞–ª –ø—Ä–æ—Ç–∏–≤ ${monster.name}...`);
    }
    setChar(updated);
    setCharacter(updated);
  };

  const handleImageError = (e) => {
    console.error("Image not found:", e.target.src);
    e.target.style.display = 'none';
  };

  if (!monster) {
    return <div className={styles.container}>Loading...</div>;
  }

  return (
    <div className={styles.container}>
      <h2 className={styles.title}>–ë–æ–π: {char.name} vs {monster.name}</h2>

      <div className={styles.hpWrapper}>
        <div className={styles.box}>
          <img 
            src={char.avatar} 
            alt="Player avatar" 
            className={styles.avatar}
            onError={handleImageError}
          />
          <p className={styles.bold}>{char.name}</p>
          <div className={styles.healthBar}>
            <div 
              className={styles.healthFill} 
              style={{ width: `${(playerHP / 100) * 100}%` }}
            />
            <span>HP: {playerHP}</span>
          </div>
        </div>
        
        <div className={styles.vs}>VS</div>
        
        <div className={styles.box}>
          <img 
            src={monster.avatar} 
            alt="Monster avatar" 
            className={styles.avatar}
            onError={handleImageError}
          />
          <p className={styles.bold}>{monster.name}</p>
          <div className={styles.healthBar}>
            <div 
              className={styles.healthFill} 
              style={{ width: `${(monsterHP / monster.health) * 100}%` }}
            />
            <span>HP: {monsterHP}</span>
          </div>
        </div>
      </div>

      {!gameOver && (
        <>
          <div className={styles.battleInterface}>
            <div className={styles.playerSection}>
              <h3>–í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è:</h3>
              
              <div className={styles.zoneSelection}>
                <h4>–ê—Ç–∞–∫–∞ (–≤—ã–±–µ—Ä–∏—Ç–µ 1 –∑–æ–Ω—É):</h4>
                <div className={styles.zones}>
                  {attackZones.map(zone => (
                    <button
                      key={zone.id}
                      className={`${styles.zoneButton} ${
                        playerAttack.includes(zone.id) ? styles.selected : ''
                      }`}
                      onClick={() => handleZoneSelect(zone.id, 'attack')}
                      disabled={playerAttack.length >= 1 && !playerAttack.includes(zone.id)}
                    >
                      {zone.icon} {zone.name}
                    </button>
                  ))}
                </div>
              </div>

              <div className={styles.zoneSelection}>
                <h4>–ó–∞—â–∏—Ç–∞ (–≤—ã–±–µ—Ä–∏—Ç–µ 2 –∑–æ–Ω—ã):</h4>
                <div className={styles.zones}>
                  {attackZones.map(zone => (
                    <button
                      key={zone.id}
                      className={`${styles.zoneButton} ${
                        playerDefense.includes(zone.id) ? styles.selected : ''
                      }`}
                      onClick={() => handleZoneSelect(zone.id, 'defense')}
                      disabled={playerDefense.length >= 2 && !playerDefense.includes(zone.id)}
                    >
                      {zone.icon} {zone.name}
                    </button>
                  ))}
                </div>
              </div>
            </div>

            <div className={styles.monsterSection}>
              <h3>–î–µ–π—Å—Ç–≤–∏—è –º–æ–Ω—Å—Ç—Ä–∞:</h3>
              <div className={styles.monsterActions}>
                <p>–ê—Ç–∞–∫–∞: {monsterAttack.map(z => getZoneIcon(z)).join(' ')}</p>
                <p>–ó–∞—â–∏—Ç–∞: {monsterDefense.map(z => getZoneIcon(z)).join(' ')}</p>
              </div>
            </div>
          </div>

          <div className={styles.buttons}>
            <button 
              onClick={fight} 
              className={styles.attack}
              disabled={isAttackButtonDisabled}
            >
              Attack ({playerAttack.length}/1 –∞—Ç–∞–∫–∞, {playerDefense.length}/2 –∑–∞—â–∏—Ç—ã)
            </button>
            <button onClick={surrender} className={styles.surrender}>
              Surrender
            </button>
          </div>
        </>
      )}

      {gameOver && (
        <button onClick={() => navigate("/main")} className={styles.back}>
          Back to Main
        </button>
      )}

      <div className={styles.log}>
        <h3>Battle Log</h3>
        {log.map((entry, idx) => (
          <p key={idx}>{entry}</p>
        ))}
      </div>
    </div>
  );
}
